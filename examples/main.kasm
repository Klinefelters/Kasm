section.constants
// TODO: Add support for constants
msg: .ascii "Hello, World!"

section.variables
// TODO: Add support for variables
c: .int 0 // int c = 0


section.subroutines
// TODO: Add branch and label support for subroutines
main:
    LDR R0, [R1]
    ADD R0, R0, R2
    STR R0, [R1]
END

section.instructions
// Math Operations
@label
ADD R0, R1, R2 // R0 = R1 + R2
SUB R0, R1, R2 // R0 = R1 - R2
MUL R0, R1, R2 // R0 = R1 * R2
DIV R0, R1, R2 // R0 = R1 / R2
REM R0, R1, R2 // R0 = R1 % R2
SLL R0, R1, R2 // R0 = R1 << R2
SLR R0, R1, R2 // R0 = R1 >> R2
SAR R0, R1, R2 // R0 = R1 >> R2 (signed)
AND R0, R1, R2 // R0 = R1 & R2
NAND R0, R1, R2 // R0 = ~(R1 & R2)
OR R0, R1, R2 // R0 = R1 | R2
NOR R0, R1, R2 // R0 = ~(R1 | R2)
XOR R0, R1, R2 // R0 = R1 ^ R2
XNOR R0, R1, R2 // R0 = ~(R1 ^ R2)
NMOV R0, R1 // R0 = ~R1
MOV R0, R1 // R0 = R1

CALL main // Call the subroutine main

// Load and Store Operations
LDR R0, [R1] // Load from RAM address R1 into register R0
LDL R0, 0xff // Load the value 0x00ff into register R0
LDH R0, 0xff // Load the value 0xff00 into register R0
STR R0 [R1] // Store the value in register R0 to RAM address R1

// Branch Operations
BGT label // Branch if greater than
BEQ label // Branch if equal
BLT label // Branch if less than
BSGT label // Branch if signed greater than
BSEQ label // Branch if signed equal
BSLT label // Branch if signed less than
JMP label // Jump the program counter to address specified in R0
// FETCH [R0] // Fetch an instruction to be executed on the next clock tick from RAM address R0

// IO Operations
IN R0, D2 // Read from device D0 into register R0 ISSUE
OUT R0, D3 // Write from register R0 to device D0 ISSUE
OUTL 0xff, D0 // Write the value 0x00ff device D0
OUTH 0xff, D0 // Write the value 0xff00 device D0

// Control Operations
NOP // No operation
HALT // Halt the processor