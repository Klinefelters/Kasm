section .vars ; A section for variables
    num: .int 0 ; A variable to store an integer
    string: .ascii "Hello, World!" ; A string variable

section .code ; A section for code
    
    NOP ; No operation, a placeholder for future instructions

    ; LOAD/STORE instructions
    STR R0, [R1] ; Store the value in R0 into memory address [R1]
    LDR R0, [R1] ; Load a value from memory address [R1] into R0
    LDRL R0, 0xFF ; Load a liteR0l value (0x00FF) R0
    LDRH R0, 0xFF ; Load a liteR0l value (0xFF00) R0
    LDL R0, 0xFF ; Load a value from memory address (0x00FF) into R0
    LDH R0, 0xFF ; Load a value from memory address (0xFF00) into R0

    ; BRANCH instructions
    JMP [R0] ; Jump to the address in R0
    BGT [R0], R1, R2 ; Branch to address [R0] if R1 is greater than R2
    BLT [R0], R1, R2 ; Branch to address [R0] if R1 is less than R2
    BEQ [R0], R1, R2 ; Branch to address [R0] if R1 is equal to R2
    BSGT [R0], R1, R2 ; Branch to address [R0] if R1 is greater than R2 (Signed Version)
    BSLT [R0], R1, R2 ; Branch to address [R0] if R1 is less than R2 (Signed Version)
    BSEQ [R0], R1, R2 ; Branch to address [R0] if R1 is equal to R2 (Signed Version)

    ; MATH instructions
    ADD R0, R1, R2 ; Add R1 and R2, store result in R0
    SUB R0, R1, R2 ; Subtract R2 from R1, store result in R0
    MUL R0, R1, R2 ; Multiply R1 and R2, store result in R0
    DIV R0, R1, R2 ; Divide R1 by R2, store result in R0
    REM R0, R1, R2 ; Remainder of R1 divided by R2, store result in R0
    SLL R0, R1, R2 ; Shift left logical R1 by the number of bits stored in R2, store result in R0    
    SLR R0, R1, R2 ; Shift left logical R1 by the number of bits stored in R2, store result in R0    
    SAR R0, R1, R2 ; Shift left logical R1 by the number of bits stored in R2, store result in R0    
    INC R0 ; Increment R0 by 1
    DEC R0 ; Decrement R0 by 1
    RST R0 ; Reset R0 to 0

    ; BITWISE instructions
    AND R0, R1, R2 ; Bitwise AND of R1 and R2, store result in R0
    OR R0, R1, R2 ; Bitwise OR of R1 and R2, store result in R0
    XOR R0, R1, R2 ; Bitwise XOR of R1 and R2, store result in R0
    NMOV R0, R1, R2 ; Bitwise NOT of R2, store result in R0, R1 is ignored
    MOV R0, R1, R2 ; R2 stored to R0, R1 is ignored

    ; IO instructions
    IN D0, R0 ; Input from device D0 into R0
    OUT D0, R0 ; Output from R0 to device D0
    OUTL D0, 0xFF ; Output a literal value (0x00FF) to device D0
    OUTH D0, 0xFF ; Output a literal value (0xFF00) to device D0

    ; STACK instructions
    PUSH R0 ; Push R0 onto the stack
    POP R0 ; Pop the top value from the stack into R0

    ; labels
    @label: ; A label for branching
        LDR R0, @label ; Load the address of the label into R0
        LDR R0, R0 ; Load the value at the address in R0 (address of the label) into R0
        JMP R0 ; Jump to the address in R0

    HALT ; Halt the program

    
